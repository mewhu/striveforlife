============================= 以下是目前的controller structure ================================

                                    ApplicationController  (authenticate_user!)
                      ________________________|__________________________
                     /\                                                  |
                    /  \                                        Admin::BaseController  (authenticate_admin)
                   /    \                                    ____________|_______________
                  /      \                                  |                            |
RestaurantsController  CategoriesController  Admin::RestaurantsController  Admin::CategoriesController




============================== 以下是關於Assets Pipeline ==============================
< Mew's 體會 >
image_tag的路徑主要有兩種推導模式
模式一) image來源字串的首字不為"/", 此時的image_tag會以Assets Pipeline為預設搜尋的起點。(developement, production)=("專案/app/assets/image/", "專案/public/assets/")
    ex:
        image_tag("happy_time.jpg")
        --> 以developement為例, 代表會去字串組合為  "專案/app/assets/images/" + "happy_time.jpg"  之處抓圖
    or  
        image_tag("holy-shit/lebron.png")
        --> 以production為例, 代表會去字串組合為  "專案/public/assets/" + "holy-shit/lebron-(一串checksum的hash碼).png"  之處抓圖

模式二) image來源字串的首字為"/", 此時的image_tag會以 "專案/public" 為預設搜尋的起點。
    ex:
        image_tag("/my-home/cat.jpg")
        --> 代表會去字串組合為  "專案/public" + "/my-home/cat.jpg"  之處抓圖
    or  
        image_tag @restaurant.image.url (其中以carrierwave掛Uploader在restaurant.image上, 此時@restaurant.image.url會被設定成"/uploads/(...)/filename.jpg", 滿足首字為"/"條件)
        --> 代表會去字串組合為  "專案/public" + "/uploads/(...)/filename.jpg"  之處抓圖

< 查看當前專案的Assets Pipeline列表 >
(In Rails console)  Rails.application.config.assets.paths




< StackOverflow 網友 rorra >
The only thing is to understand how image_tag works.

Usually you put all your images, javscripts and stylesheests on the app/assets directory. When you work on the development environment, those files as served uncompressed, but when you deploy to production, the assets are precompiled, minified, and the result files are stored in public/assets.

The idea behind minified assets, is just to make the requests faster for the clients, and to save bandwidth.

Now, on the method image_tag, you can use an external path for the image, a local path for the image or a relative path for the image.

When you do
    <%= image_tag "http://www.mywebsite.com/image.jpg" %>
it will use the absolute url for the image tag, and you will end with
    <img src="http://www.mywebsite.com/image.jpg" />

You can add a local path as well, like
    <%= image_tag "/images/image.jpg" %>
Which will end in
    <img src="/images/image.jpg" />
which is actually the issue you are having, because rails, when it precompiles the files, it puts everything within /public/assets, and you can access those files by going to the path /assets as the other users explained.

So the code
    <%= image_tag "/assets/image.jpg" %>
actually works, because you end with
    <img src="/assets/image.jpg" />

The other thing you can do, is to use a relative path, i.e.
    <%= image_tag "image.jpg" %>
that will be converted to
    <img src="/assets/image.jpg" />
and that will work the same the last scenario.

Nevertheless, on your application, you are going to let the users to upload their own images, this will happen later when you advance on the book, on a real world app, you will use a gem like paperclip or carrierwave




< [ihower講解Assets] https://ihower.tw/rails/assets-pipeline.html#sec1 >
要讀取放在 app/assets/images 目錄下的圖片時，要怎麼撰寫 src 屬性的值呢?
放在app/assets/images下的圖片該怎麼使用呢？在實際佈署後，Rails會將檔案名稱加以編碼，
例如rails.png會變成rails-bd9ad5a560b5a3a7be0808c5cd76a798.png。這麼做的原因是當圖片有變更的時候，
編碼就會不同而有不同的檔名，這樣就可以避免瀏覽器快取到舊的檔案。也因為檔案名稱會變動，所以放在app/assets/images下的圖片，
要用的時候就沒有辦法寫死檔名。
—>在一般的View中，可以使用image_tag這個Helper：
        <%= image_tag("rails.png") %>

如果在CSS裡的話，有兩種辦法：一是將檔案命名為erb結尾，例如app/assets/stylesheets/main.css.erb，然後使用asset_path這個Helper：
        h1 {
        background-image: url('<%= asset_path("rails.png") %>');
        }

另一種方法是使用Sass或SCSS語法。其中SCSS相容於CSS。例如命名為app/assets/stylesheets/main.scss，然後使用image-url這個Sass提供的方法：
        h1 {
        background-image: image-url("rails.png")
        }

如果是js檔案中想要拿圖片的位置，就只能用js.erb的格式，然後內嵌asset_path Helper方法了。

其他 Helper
Assets 提供了很多路徑 helper 來讓你指向你的 assets，可以在 erb 樣板中使用：
        audio_path("horse.wav")   # => /audios/horse.wav
        audio_tag("sound")        # => <audio src="/audios/sound" />
        font_path("font.ttf")     # => /fonts/font.ttf
        image_path("edit.png")    # => "/images/edit.png"
        image_tag("icon.png")     # => <img src="/images/icon.png" alt="Icon" />
        video_path("hd.avi")      # => /videos/hd.avi
        video_tag("trailer.ogg")  # => <video src="/videos/trailer.ogg" />

Sass 還提供了像是 -url 和 -path 這樣的 helper 來協助你，因此你可以在 scss 樣板中這樣使用：
        image-url("rails.png")         # => url(/assets/rails.png)
        image-path("rails.png")        # => "/assets/rails.png"
        asset-url("rails.png", image)  # => url(/assets/rails.png)
        asset-path("rails.png", image) # => "/assets/rails.png"


============================== 以下關於delegate用法(節錄自ihower) ===================================
讓我們來修改 app/views/events/show.html.erb 可以顯示出 category 的名字：

    <p>Category: <%= @event.category.name %></p>

不過 @event.category 可能是 nil，這會導致 nil.name 發生錯誤。
一個簡單的方式是改使用 

    @event.category.try(:name)

另一招則是在 Event model 加入以下程式，就會有 @event.category_name 可以使用，而且允許 @event.category 是 nil

    delegate :name, :to => :category, :prefix => true, :allow_nil => true

----------------------------- 關節的解讀 --------------------------------
關節 2017-12-15 15:30

我的認知是restaurant加了delegate :name, to: :category, allow_nil: true (沒有prefix)
可以把category的"name" method直接拿來用，也就是@restaurant.name可直接取出該餐廳的類別名稱
不過這樣他自己原本的.name就被作廢了，沒辦法取出餐廳名稱，所以加perfix
加了prefix: true之後代表新方法名稱是用底線把category跟name連起來，即@restaurant.category_name，這樣就可以取出這個餐廳的類別
也就是delegate :name, to: :category, prefix: true, allow_nil: true 
再搭配@restaurant.category_name
就可以在餐廳類別為nil的狀況下仍然顯示無礙




============================= 以下是heroku要重置postgre SQL的方法 ================================
 2004  heroku pg:reset DATABASE
 2005  heroku run rails db:migrate
 2006  heroku run rails dev:fake
 2007  heroku run rails db:seed
 2008  heroku run rails dev:fake
 2009  history

